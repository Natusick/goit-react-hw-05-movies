{"version":3,"file":"static/js/500.d32dd73a.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieList/MovieList.module.css?6db5","components/MovieList/MovieList.js","webpack://goit-react-hw-05-movies/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.js","webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.js","services/Api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieList_list__NC0Pu\",\"item\":\"MovieList_item__x1igq\",\"image\":\"MovieList_image__WJTXK\",\"cardlink\":\"MovieList_cardlink__gckqb\"};","import { Link, useLocation } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./MovieList.module.css\";\r\nimport { URL_IMG } from \"../../services/Api\";\r\n\r\nexport const MovieList = ({ movies }) => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <>\r\n      <ul className={s.list}>\r\n        {movies.map(({ id, title, poster_path }) => (\r\n          <li key={id} className={s.item}>\r\n            <img\r\n              src={URL_IMG + poster_path}\r\n              alt={title}\r\n              width=\"250\"\r\n              className={s.image}\r\n            />\r\n            <Link\r\n              to={`/movies/${id}`}\r\n              state={{ from: location }}\r\n              className={s.cardlink}\r\n            >\r\n              {title}\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nMovieList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n    }).isRequired\r\n  ),\r\n};\r\n\r\nexport default MovieList;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Searchbar_form__-spLF\",\"input\":\"Searchbar_input__ul2Ef\",\"button\":\"Searchbar_button__n3kkZ\"};","import s from \"./Searchbar.module.css\";\r\nimport { Notify } from 'notiflix';\r\nimport PropTypes from 'prop-types';\r\nimport { useState } from \"react\";\r\n\r\nexport const Searchbar = ({ onSubmit }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n \r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if(inputValue.trim() === ''){\r\n     \r\n      return;\r\n    }\r\n    onSubmit(inputValue);\r\n    setInputValue('');    \r\n  };\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit} >\r\n      <input\r\n        className={s.input}\r\n        type=\"text\"\r\n        name=\"query\"\r\n        autoComplete=\"off\"\r\n        autoFocus\r\n        placeholder=\"Enter movie name\"\r\n        value={inputValue}\r\n        onChange={e => setInputValue(e.target.value)}\r\n      />\r\n      <button type=\"submit\" className={s.button}>\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\nexport default Searchbar;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"seachMovie\":\"Movies_seachMovie__9fNYt\"};","import { useState, useEffect } from \"react\";\r\nimport { Searchbar } from \"../../components/Searchbar/Searchbar\";\r\nimport { Loading } from \"../../components/Loading/Loading\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport * as getApi from \"../../services/Api\";\r\nimport { Notify } from \"notiflix\";\r\nimport MovieList from \"../../components/MovieList/MovieList\";\r\nimport s from \"./Movies.module.css\";\r\n\r\nexport const Movies = () => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [movies, setMovies] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const queryParam = searchParams.get(\"query\") ?? \"\";\r\n\r\n  useEffect(() => {\r\n    if (queryParam === \"\") {\r\n      Notify.info(\"Enter the name of the movie\");\r\n    }\r\n\r\n    setSearchParams({ queryParam });\r\n\r\n    const fetch = async () => {\r\n      try {\r\n        const {\r\n          data: { results },\r\n        } = await getApi.searchMovie(queryParam);\r\n        setMovies(results);\r\n      } catch {\r\n        console.log(\"error\");\r\n      }\r\n    };\r\n\r\n    fetch();\r\n  }, [queryParam, setSearchParams]);\r\n\r\n  const onSearchForm = (queryParam) => {\r\n    setSearchParams({ query: queryParam });\r\n  };\r\n\r\n  return (\r\n    <main className={s.seachMovie}>\r\n      <Searchbar onSubmit={onSearchForm} />\r\n\r\n      {isLoading && <Loading />}\r\n      {movies && <MovieList movies={movies} />}\r\n    </main>\r\n  );\r\n};\r\nexport default Movies;\r\n","import axios from \"axios\";\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst API_KEY = 'cd663ecb08f749a7c516ed1131752030'; \r\n\r\nexport const URL_IMG = \"https://image.tmdb.org/t/p/w500\";\r\n\r\nexport const fetchTrending = async () => {\r\n  return await axios.get(`${BASE_URL}trending/movie/day?api_key=${API_KEY}`);\r\n  ;\r\n}\r\n\r\nexport const searchMovie = async queryParam => {\r\n  return await axios.get(`${BASE_URL}search/movie?api_key=${API_KEY}&query=${queryParam}&language=en-US&page=1&include_adult=false`);\r\n}\r\n\r\n\r\nexport const fetchMovieDetails = async movieId => {\r\n return await axios.get(`${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`);\r\n}\r\n\r\nexport const fetchCast = async movieId => {\r\n  const response = await axios.get(\r\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\r\n  );\r\n  return response.data.cast;\r\n};\r\n\r\nexport const fetchReviews = async movieId => {\r\n const response = await axios.get(`${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\r\n return response.data.cast;\r\n}\r\n\r\n\r\n\r\n\r\n"],"names":["MovieList","movies","location","useLocation","className","s","map","id","title","poster_path","src","URL_IMG","alt","width","to","state","from","Searchbar","onSubmit","useState","inputValue","setInputValue","e","preventDefault","trim","type","name","autoComplete","autoFocus","placeholder","value","onChange","target","Movies","useSearchParams","searchParams","setSearchParams","setMovies","isLoading","queryParam","get","useEffect","Notify","fetch","getApi","results","data","console","log","query","Loading","BASE_URL","API_KEY","fetchTrending","axios","searchMovie","fetchMovieDetails","movieId","fetchCast","response","cast","fetchReviews"],"sourceRoot":""}